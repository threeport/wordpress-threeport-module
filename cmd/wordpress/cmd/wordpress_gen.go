// generated by 'threeport-sdk gen' - do not edit

package cmd

import (
	"encoding/json"
	"errors"
	"fmt"
	ghodss_yaml "github.com/ghodss/yaml"
	cobra "github.com/spf13/cobra"
	tptctl_cmd "github.com/threeport/threeport/cmd/tptctl/cmd"
	cli "github.com/threeport/threeport/pkg/cli/v0"
	tptctl_config "github.com/threeport/threeport/pkg/config/v0"
	encryption "github.com/threeport/threeport/pkg/encryption/v0"
	util "github.com/threeport/threeport/pkg/util/v0"
	yaml "gopkg.in/yaml.v2"
	"os"
	api_v0 "wordpress-threeport-module/pkg/api/v0"
	client_v0 "wordpress-threeport-module/pkg/client/v0"
	config_v0 "wordpress-threeport-module/pkg/config/v0"
)

///////////////////////////////////////////////////////////////////////////////
// WordpressDefinition
///////////////////////////////////////////////////////////////////////////////

var getWordpressDefinitionVersion string

// GetWordpressDefinitionsCmd represents the wordpress-definition command
var GetWordpressDefinitionsCmd = &cobra.Command{
	Example: "  tptctl wordpress get wordpress-definitions",
	Long:    "Get wordpress definitions from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		switch getWordpressDefinitionVersion {
		case "v0":
			// get wordpress definitions
			wordpressDefinitions, err := client_v0.GetWordpressDefinitions(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve wordpress definitions", err)
				os.Exit(1)
			}

			// write the output
			if len(*wordpressDefinitions) == 0 {
				cli.Info(fmt.Sprintf(
					"No wordpress definitions currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0WordpressDefinitionsCmd(
				wordpressDefinitions,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get wordpress definitions from the system",
	SilenceUsage: true,
	Use:          "wordpress-definitions",
}

func init() {
	GetCmd.AddCommand(GetWordpressDefinitionsCmd)

	GetWordpressDefinitionsCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetWordpressDefinitionsCmd.Flags().StringVarP(
		&getWordpressDefinitionVersion,
		"version", "v", "v0", "Version of wordpress definitions object to retrieve. One of: [v0]",
	)
}

var (
	createWordpressDefinitionConfigPath string
	createWordpressDefinitionVersion    string
)

// CreateWordpressDefinitionCmd represents the wordpress-definition command
var CreateWordpressDefinitionCmd = &cobra.Command{
	Example: "  tptctl wordpress create wordpress-definition --config path/to/config.yaml",
	Long:    "Create a new wordpress definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wordpress definition config
		configContent, err := os.ReadFile(createWordpressDefinitionConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create wordpress definition based on version
		switch createWordpressDefinitionVersion {
		case "v0":
			var wordpressDefinitionConfig config_v0.WordpressDefinitionConfig
			if err := yaml.UnmarshalStrict(configContent, &wordpressDefinitionConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wordpress definition
			wordpressDefinition := wordpressDefinitionConfig.WordpressDefinition
			createdWordpressDefinition, err := wordpressDefinition.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create wordpress definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wordpress definition %s created", *createdWordpressDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wordpress definition",
	SilenceUsage: true,
	Use:          "wordpress-definition",
}

func init() {
	CreateCmd.AddCommand(CreateWordpressDefinitionCmd)

	CreateWordpressDefinitionCmd.Flags().StringVarP(
		&createWordpressDefinitionConfigPath,
		"config", "c", "", "Path to file with wordpress definition config.",
	)
	CreateWordpressDefinitionCmd.MarkFlagRequired("config")
	CreateWordpressDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWordpressDefinitionCmd.Flags().StringVarP(
		&createWordpressDefinitionVersion,
		"version", "v", "v0", "Version of wordpress definitions object to create. One of: [v0]",
	)
}

var (
	deleteWordpressDefinitionConfigPath string
	deleteWordpressDefinitionName       string
	deleteWordpressDefinitionVersion    string
)

// DeleteWordpressDefinitionCmd represents the wordpress-definition command
var DeleteWordpressDefinitionCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wordpress delete wordpress-definition --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wordpress delete wordpress-definition --name some-wordpress-definition",
	Long:    "Delete an existing wordpress definition.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteWordpressDefinitionConfigPath,
			deleteWordpressDefinitionName,
			"wordpress definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete wordpress definition based on version
		switch deleteWordpressDefinitionVersion {
		case "v0":
			var wordpressDefinitionConfig config_v0.WordpressDefinitionConfig
			if deleteWordpressDefinitionConfigPath != "" {
				// load wordpress definition config
				configContent, err := os.ReadFile(deleteWordpressDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wordpressDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wordpressDefinitionConfig = config_v0.WordpressDefinitionConfig{
					WordpressDefinition: config_v0.WordpressDefinitionValues{
						Name: &deleteWordpressDefinitionName,
					},
				}
			}

			// delete wordpress definition
			wordpressDefinition := wordpressDefinitionConfig.WordpressDefinition
			deletedWordpressDefinition, err := wordpressDefinition.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wordpress definition", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wordpress definition %s deleted", *deletedWordpressDefinition.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wordpress definition",
	SilenceUsage: true,
	Use:          "wordpress-definition",
}

func init() {
	DeleteCmd.AddCommand(DeleteWordpressDefinitionCmd)

	DeleteWordpressDefinitionCmd.Flags().StringVarP(
		&deleteWordpressDefinitionConfigPath,
		"config", "c", "", "Path to file with wordpress definition config.",
	)
	DeleteWordpressDefinitionCmd.Flags().StringVarP(
		&deleteWordpressDefinitionName,
		"name", "n", "", "Name of wordpress definition.",
	)
	DeleteWordpressDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWordpressDefinitionCmd.Flags().StringVarP(
		&deleteWordpressDefinitionVersion,
		"version", "v", "v0", "Version of wordpress definitions object to delete. One of: [v0]",
	)
}

var (
	describeWordpressDefinitionConfigPath string
	describeWordpressDefinitionName       string
	describeWordpressDefinitionField      string
	describeWordpressDefinitionOutput     string
	describeWordpressDefinitionVersion    string
)

// DescribeWordpressDefinitionCmd representes the wordpress-definition command
var DescribeWordpressDefinitionCmd = &cobra.Command{
	Example: "  # Get the plain output description for a wordpress definition\n  tptctl wordpress describe wordpress-definition -n some-wordpress-definition\n\n  # Get JSON output for a wordpress definition\n  tptctl wordpress describe wordpress-definition -n some-wordpress-definition -o json\n\n  # Get the value of the Name field for a wordpress definition\n  tptctl wordpress describe wordpress-definition -n some-wordpress-definition -f Name ",
	Long:    "Describe a wordpress definition.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeWordpressDefinitionConfigPath,
			describeWordpressDefinitionName,
			"wordpress definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeWordpressDefinitionOutput,
			"wordpress definition",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get wordpress definition
		var wordpressDefinition interface{}
		switch describeWordpressDefinitionVersion {
		case "v0":
			// load wordpress definition config by name or config file
			var wordpressDefinitionConfig config_v0.WordpressDefinitionConfig
			if describeWordpressDefinitionConfigPath != "" {
				configContent, err := os.ReadFile(describeWordpressDefinitionConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wordpressDefinitionConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wordpressDefinitionConfig = config_v0.WordpressDefinitionConfig{
					WordpressDefinition: config_v0.WordpressDefinitionValues{
						Name: &describeWordpressDefinitionName,
					},
				}
			}

			// get wordpress definition object by name
			obj, err := client_v0.GetWordpressDefinitionByName(
				apiClient,
				apiEndpoint,
				*wordpressDefinitionConfig.WordpressDefinition.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve wordpress definition details", err)
				os.Exit(1)
			}
			wordpressDefinition = obj

			// return plain output if requested
			if describeWordpressDefinitionOutput == "plain" {
				if err := outputDescribev0WordpressDefinitionCmd(
					wordpressDefinition.(*api_v0.WordpressDefinition),
					&wordpressDefinitionConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe wordpress definition", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeWordpressDefinitionField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				wordpressDefinition,
				describeWordpressDefinitionField,
			)
			if err != nil {
				cli.Error("failed to get field value from wordpress definition", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(wordpressDefinition, describeWordpressDefinitionField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := tptctl_config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeWordpressDefinitionOutput {
		case "json":
			// redact encrypted values
			redactedWordpressDefinition := encryption.RedactEncryptedValues(wordpressDefinition)

			// marshal to JSON then print
			wordpressDefinitionJson, err := json.MarshalIndent(redactedWordpressDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wordpress definition into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(wordpressDefinitionJson))
		case "yaml":
			// redact encrypted values
			redactedWordpressDefinition := encryption.RedactEncryptedValues(wordpressDefinition)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			wordpressDefinitionJson, err := json.MarshalIndent(redactedWordpressDefinition, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wordpress definition into JSON", err)
				os.Exit(1)
			}
			wordpressDefinitionYaml, err := ghodss_yaml.JSONToYAML(wordpressDefinitionJson)
			if err != nil {
				cli.Error("failed to convert wordpress definition JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(wordpressDefinitionYaml))
		}
	},
	Short:        "Describe a wordpress definition",
	SilenceUsage: true,
	Use:          "wordpress-definition",
}

func init() {
	DescribeCmd.AddCommand(DescribeWordpressDefinitionCmd)

	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&describeWordpressDefinitionConfigPath,
		"config", "c", "", "Path to file with wordpress definition config.",
	)
	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&describeWordpressDefinitionName,
		"name", "n", "", "Name of wordpress definition.",
	)
	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&describeWordpressDefinitionOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&describeWordpressDefinitionField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeWordpressDefinitionCmd.Flags().StringVarP(
		&describeWordpressDefinitionVersion,
		"version", "v", "v0", "Version of wordpress definitions object to describe. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// Wordpress
///////////////////////////////////////////////////////////////////////////////

// GetWordpressesCmd represents the wordpress command
var GetWordpressesCmd = &cobra.Command{
	Example: "  tptctl wordpress get wordpresses",
	Long:    "Get wordpresses from the system.\n\nA wordpress is a simple abstraction of wordpress definitions and wordpress instances.\nThis command displays all instances and the definitions used to configure them.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		// get wordpresses
		v0wordpressInstances, err := client_v0.GetWordpressInstances(apiClient, apiEndpoint)
		if err != nil {
			cli.Error("failed to retrieve wordpress instances", err)
			os.Exit(1)
		}

		// write the output
		if len(*v0wordpressInstances) == 0 {
			cli.Info(fmt.Sprintf(
				"No wordpress instances currently managed by %s threeport control plane",
				requestedControlPlane,
			))
			os.Exit(0)
		}
		if err := outputGetWordpressesCmd(
			v0wordpressInstances,
			apiClient,
			apiEndpoint,
		); err != nil {
			cli.Error("failed to produce output: %s", err)
			os.Exit(0)
		}
	},
	Short:        "Get wordpresses from the system",
	SilenceUsage: true,
	Use:          "wordpresses",
}

func init() {
	GetCmd.AddCommand(GetWordpressesCmd)

	GetWordpressesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
}

var (
	createWordpressConfigPath string
	createWordpressVersion    string
)

// CreateWordpressCmd represents the wordpress command
var CreateWordpressCmd = &cobra.Command{
	Example: "  tptctl wordpress create wordpress --config path/to/config.yaml",
	Long:    "Create a new wordpress. This command creates a new wordpress definition and wordpress instance based on the wordpress config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wordpress config
		configContent, err := os.ReadFile(createWordpressConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// create wordpress based on version
		switch createWordpressVersion {
		case "v0":
			var wordpressConfig config_v0.WordpressConfig
			if err := yaml.UnmarshalStrict(configContent, &wordpressConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wordpress
			wordpress := wordpressConfig.Wordpress
			createdWordpressDefinition, createdWordpressInstance, err := wordpress.Create(
				apiClient,
				apiEndpoint,
			)
			if err != nil {
				cli.Error("failed to create wordpress", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("wordpress definition %s created", *createdWordpressDefinition.Name))
			cli.Info(fmt.Sprintf("wordpress instance %s created", *createdWordpressInstance.Name))
			cli.Complete(fmt.Sprintf("wordpress %s created", *wordpressConfig.Wordpress.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wordpress",
	SilenceUsage: true,
	Use:          "wordpress",
}

func init() {
	CreateCmd.AddCommand(CreateWordpressCmd)

	CreateWordpressCmd.Flags().StringVarP(
		&createWordpressConfigPath,
		"config", "c", "", "Path to file with wordpress config.",
	)
	CreateWordpressCmd.MarkFlagRequired("config")
	CreateWordpressCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWordpressCmd.Flags().StringVarP(
		&createWordpressVersion,
		"version", "v", "v0", "Version of wordpresses object to create. One of: [v0]",
	)
}

var (
	deleteWordpressConfigPath string
	deleteWordpressName       string
	deleteWordpressVersion    string
)

// DeleteWordpressCmd represents the wordpress command
var DeleteWordpressCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wordpress delete wordpress --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wordpress delete wordpress --name some-wordpress",
	Long:    "Delete an existing wordpress. This command deletes an existing wordpress definition and wordpress instance based on the wordpress config.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if deleteWordpressConfigPath == "" {
			cli.Error("flag validation failed", errors.New("config file path is required"))
		}

		// read wordpress config
		configContent, err := os.ReadFile(deleteWordpressConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}

		// delete wordpress based on version
		switch deleteWordpressVersion {
		case "v0":
			var wordpressConfig config_v0.WordpressConfig
			if err := yaml.UnmarshalStrict(configContent, &wordpressConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// delete wordpress
			wordpress := wordpressConfig.Wordpress
			_, _, err = wordpress.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wordpress", err)
				os.Exit(1)
			}

			cli.Info(fmt.Sprintf("wordpress definition %s deleted", *wordpress.Name))
			cli.Info(fmt.Sprintf("wordpress instance %s deleted", *wordpress.Name))
			cli.Complete(fmt.Sprintf("wordpress %s deleted", *wordpressConfig.Wordpress.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wordpress",
	SilenceUsage: true,
	Use:          "wordpress",
}

func init() {
	DeleteCmd.AddCommand(DeleteWordpressCmd)

	DeleteWordpressCmd.Flags().StringVarP(
		&deleteWordpressConfigPath,
		"config", "c", "", "Path to file with wordpress config.",
	)
	DeleteWordpressCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWordpressCmd.Flags().StringVarP(
		&deleteWordpressVersion,
		"version", "v", "v0", "Version of wordpresses object to delete. One of: [v0]",
	)
}

///////////////////////////////////////////////////////////////////////////////
// WordpressInstance
///////////////////////////////////////////////////////////////////////////////

var getWordpressInstanceVersion string

// GetWordpressInstancesCmd represents the wordpress-instance command
var GetWordpressInstancesCmd = &cobra.Command{
	Example: "  tptctl wordpress get wordpress-instances",
	Long:    "Get wordpress instances from the system.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, requestedControlPlane := tptctl_cmd.GetClientContext(cmd)

		switch getWordpressInstanceVersion {
		case "v0":
			// get wordpress instances
			wordpressInstances, err := client_v0.GetWordpressInstances(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to retrieve wordpress instances", err)
				os.Exit(1)
			}

			// write the output
			if len(*wordpressInstances) == 0 {
				cli.Info(fmt.Sprintf(
					"No wordpress instances currently managed by %s threeport control plane",
					requestedControlPlane,
				))
				os.Exit(0)
			}
			if err := outputGetv0WordpressInstancesCmd(
				wordpressInstances,
				apiClient,
				apiEndpoint,
			); err != nil {
				cli.Error("failed to produce output", err)
				os.Exit(0)
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Get wordpress instances from the system",
	SilenceUsage: true,
	Use:          "wordpress-instances",
}

func init() {
	GetCmd.AddCommand(GetWordpressInstancesCmd)

	GetWordpressInstancesCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	GetWordpressInstancesCmd.Flags().StringVarP(
		&getWordpressInstanceVersion,
		"version", "v", "v0", "Version of wordpress instances object to retrieve. One of: [v0]",
	)
}

var (
	createWordpressInstanceConfigPath string
	createWordpressInstanceVersion    string
)

// CreateWordpressInstanceCmd represents the wordpress-instance command
var CreateWordpressInstanceCmd = &cobra.Command{
	Example: "  tptctl wordpress create wordpress-instance --config path/to/config.yaml",
	Long:    "Create a new wordpress instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// read wordpress instance config
		configContent, err := os.ReadFile(createWordpressInstanceConfigPath)
		if err != nil {
			cli.Error("failed to read config file", err)
			os.Exit(1)
		}
		// create wordpress instance based on version
		switch createWordpressInstanceVersion {
		case "v0":
			var wordpressInstanceConfig config_v0.WordpressInstanceConfig
			if err := yaml.UnmarshalStrict(configContent, &wordpressInstanceConfig); err != nil {
				cli.Error("failed to unmarshal config file yaml content", err)
				os.Exit(1)
			}

			// create wordpress instance
			wordpressInstance := wordpressInstanceConfig.WordpressInstance
			createdWordpressInstance, err := wordpressInstance.Create(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to create wordpress instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wordpress instance %s created", *createdWordpressInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Create a new wordpress instance",
	SilenceUsage: true,
	Use:          "wordpress-instance",
}

func init() {
	CreateCmd.AddCommand(CreateWordpressInstanceCmd)

	CreateWordpressInstanceCmd.Flags().StringVarP(
		&createWordpressInstanceConfigPath,
		"config", "c", "", "Path to file with wordpress instance config.",
	)
	CreateWordpressInstanceCmd.MarkFlagRequired("config")
	CreateWordpressInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	CreateWordpressInstanceCmd.Flags().StringVarP(
		&createWordpressInstanceVersion,
		"version", "v", "v0", "Version of wordpress instances object to create. One of: [v0]",
	)
}

var (
	deleteWordpressInstanceConfigPath string
	deleteWordpressInstanceName       string
	deleteWordpressInstanceVersion    string
)

// DeleteWordpressInstanceCmd represents the wordpress-instance command
var DeleteWordpressInstanceCmd = &cobra.Command{
	Example: "  # delete based on config file\n  tptctl wordpress delete wordpress-instance --config path/to/config.yaml\n\n  # delete based on name\n  tptctl wordpress delete wordpress-instance --name some-wordpress-instance",
	Long:    "Delete an existing wordpress instance.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			deleteWordpressInstanceConfigPath,
			deleteWordpressInstanceName,
			"wordpress instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// delete wordpress instance based on version
		switch deleteWordpressInstanceVersion {
		case "v0":
			var wordpressInstanceConfig config_v0.WordpressInstanceConfig
			if deleteWordpressInstanceConfigPath != "" {
				// load wordpress instance config
				configContent, err := os.ReadFile(deleteWordpressInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wordpressInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wordpressInstanceConfig = config_v0.WordpressInstanceConfig{
					WordpressInstance: config_v0.WordpressInstanceValues{
						Name: &deleteWordpressInstanceName,
					},
				}
			}

			// delete wordpress instance
			wordpressInstance := wordpressInstanceConfig.WordpressInstance
			deletedWordpressInstance, err := wordpressInstance.Delete(apiClient, apiEndpoint)
			if err != nil {
				cli.Error("failed to delete wordpress instance", err)
				os.Exit(1)
			}

			cli.Complete(fmt.Sprintf("wordpress instance %s deleted", *deletedWordpressInstance.Name))
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}
	},
	Short:        "Delete an existing wordpress instance",
	SilenceUsage: true,
	Use:          "wordpress-instance",
}

func init() {
	DeleteCmd.AddCommand(DeleteWordpressInstanceCmd)

	DeleteWordpressInstanceCmd.Flags().StringVarP(
		&deleteWordpressInstanceConfigPath,
		"config", "c", "", "Path to file with wordpress instance config.",
	)
	DeleteWordpressInstanceCmd.Flags().StringVarP(
		&deleteWordpressInstanceName,
		"name", "n", "", "Name of wordpress instance.",
	)
	DeleteWordpressInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DeleteWordpressInstanceCmd.Flags().StringVarP(
		&deleteWordpressInstanceVersion,
		"version", "v", "v0", "Version of wordpress instances object to delete. One of: [v0]",
	)
}

var (
	describeWordpressInstanceConfigPath string
	describeWordpressInstanceName       string
	describeWordpressInstanceField      string
	describeWordpressInstanceOutput     string
	describeWordpressInstanceVersion    string
)

// DescribeWordpressInstanceCmd representes the wordpress-instance command
var DescribeWordpressInstanceCmd = &cobra.Command{
	Example: "  # Get the plain output description for a wordpress instance\n  tptctl wordpress describe wordpress-instance -n some-wordpress-instance\n\n  # Get JSON output for a wordpress instance\n  tptctl wordpress describe wordpress-instance -n some-wordpress-instance -o json\n\n  # Get the value of the Name field for a wordpress instance\n  tptctl wordpress describe wordpress-instance -n some-wordpress-instance -f Name ",
	Long:    "Describe a wordpress instance.  This command can give you a plain output description, output all fields in JSON or YAML format, or provide the value of any specific field.\n\nNote: any values that are encrypted in the database will be redacted unless the field is specifically requested with the --field flag.",
	PreRun:  CommandPreRunFunc,
	Run: func(cmd *cobra.Command, args []string) {
		apiClient, _, apiEndpoint, _ := tptctl_cmd.GetClientContext(cmd)

		// flag validation
		if err := cli.ValidateConfigNameFlags(
			describeWordpressInstanceConfigPath,
			describeWordpressInstanceName,
			"wordpress instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		if err := cli.ValidateDescribeOutputFlag(
			describeWordpressInstanceOutput,
			"wordpress instance",
		); err != nil {
			cli.Error("flag validation failed", err)
			os.Exit(1)
		}

		// get wordpress instance
		var wordpressInstance interface{}
		switch describeWordpressInstanceVersion {
		case "v0":
			// load wordpress instance config by name or config file
			var wordpressInstanceConfig config_v0.WordpressInstanceConfig
			if describeWordpressInstanceConfigPath != "" {
				configContent, err := os.ReadFile(describeWordpressInstanceConfigPath)
				if err != nil {
					cli.Error("failed to read config file", err)
					os.Exit(1)
				}
				if err := yaml.UnmarshalStrict(configContent, &wordpressInstanceConfig); err != nil {
					cli.Error("failed to unmarshal config file yaml content", err)
					os.Exit(1)
				}
			} else {
				wordpressInstanceConfig = config_v0.WordpressInstanceConfig{
					WordpressInstance: config_v0.WordpressInstanceValues{
						Name: &describeWordpressInstanceName,
					},
				}
			}

			// get wordpress instance object by name
			obj, err := client_v0.GetWordpressInstanceByName(
				apiClient,
				apiEndpoint,
				*wordpressInstanceConfig.WordpressInstance.Name,
			)
			if err != nil {
				cli.Error("failed to retrieve wordpress instance details", err)
				os.Exit(1)
			}
			wordpressInstance = obj

			// return plain output if requested
			if describeWordpressInstanceOutput == "plain" {
				if err := outputDescribev0WordpressInstanceCmd(
					wordpressInstance.(*api_v0.WordpressInstance),
					&wordpressInstanceConfig,
					apiClient,
					apiEndpoint,
				); err != nil {
					cli.Error("failed to describe wordpress instance", err)
					os.Exit(1)
				}
			}
		default:
			cli.Error("", errors.New("unrecognized object version"))
			os.Exit(1)
		}

		// return field value if specified
		if describeWordpressInstanceField != "" {
			fieldVal, err := util.GetObjectFieldValue(
				wordpressInstance,
				describeWordpressInstanceField,
			)
			if err != nil {
				cli.Error("failed to get field value from wordpress instance", err)
				os.Exit(1)
			}

			// decrypt value as needed
			encrypted, err := encryption.IsEncryptedField(wordpressInstance, describeWordpressInstanceField)
			if err != nil {
				cli.Error("", err)
			}
			if encrypted {
				// get encryption key from threeport config
				threeportConfig, requestedControlPlane, err := tptctl_config.GetThreeportConfig(cliArgs.ControlPlaneName)
				if err != nil {
					cli.Error("failed to get threeport config: %w", err)
					os.Exit(1)
				}
				encryptionKey, err := threeportConfig.GetThreeportEncryptionKey(requestedControlPlane)
				if err != nil {
					cli.Error("failed to get encryption key from threeport config: %w", err)
					os.Exit(1)
				}

				// decrypt value for output
				decryptedVal, err := encryption.Decrypt(encryptionKey, fieldVal.String())
				if err != nil {
					cli.Error("failed to decrypt value: %w", err)
				}
				fmt.Println(decryptedVal)
				os.Exit(0)
			} else {
				fmt.Println(fieldVal.Interface())
				os.Exit(0)
			}
		}

		// produce json or yaml output if requested
		switch describeWordpressInstanceOutput {
		case "json":
			// redact encrypted values
			redactedWordpressInstance := encryption.RedactEncryptedValues(wordpressInstance)

			// marshal to JSON then print
			wordpressInstanceJson, err := json.MarshalIndent(redactedWordpressInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wordpress instance into JSON", err)
				os.Exit(1)
			}

			fmt.Println(string(wordpressInstanceJson))
		case "yaml":
			// redact encrypted values
			redactedWordpressInstance := encryption.RedactEncryptedValues(wordpressInstance)

			// marshal to JSON then convert to YAML - this results in field
			// names with correct capitalization vs marshalling directly to YAML
			wordpressInstanceJson, err := json.MarshalIndent(redactedWordpressInstance, "", "  ")
			if err != nil {
				cli.Error("failed to marshal wordpress instance into JSON", err)
				os.Exit(1)
			}
			wordpressInstanceYaml, err := ghodss_yaml.JSONToYAML(wordpressInstanceJson)
			if err != nil {
				cli.Error("failed to convert wordpress instance JSON to YAML", err)
				os.Exit(1)
			}

			fmt.Println(string(wordpressInstanceYaml))
		}
	},
	Short:        "Describe a wordpress instance",
	SilenceUsage: true,
	Use:          "wordpress-instance",
}

func init() {
	DescribeCmd.AddCommand(DescribeWordpressInstanceCmd)

	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&describeWordpressInstanceConfigPath,
		"config", "c", "", "Path to file with wordpress instance config.",
	)
	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&describeWordpressInstanceName,
		"name", "n", "", "Name of wordpress instance.",
	)
	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&describeWordpressInstanceOutput,
		"output", "o", "plain", "Output format for object description. One of 'plain','json','yaml'.  Will be ignored if the --field flag is also used.  Plain output produces select details about the object.  JSON and YAML output formats include all direct attributes of the object",
	)
	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&describeWordpressInstanceField,
		"field", "f", "", "Object field to get value for. If used, --output flag will be ignored.  *Only* the value of the desired field will be returned.  Will not return information on related objects, only direct attributes of the object itself.",
	)
	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&cliArgs.ControlPlaneName,
		"control-plane-name", "i", "", "Optional. Name of control plane. Will default to current control plane if not provided.",
	)
	DescribeWordpressInstanceCmd.Flags().StringVarP(
		&describeWordpressInstanceVersion,
		"version", "v", "v0", "Version of wordpress instances object to describe. One of: [v0]",
	)
}
