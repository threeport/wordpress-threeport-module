// generated by 'threeport-sdk gen' - do not edit

package handlers

import (
	"errors"
	"fmt"
	echo "github.com/labstack/echo/v4"
	tpapiserver_lib "github.com/threeport/threeport/pkg/api-server/lib/v0"
	tpapi_v0 "github.com/threeport/threeport/pkg/api/v0"
	notifications "github.com/threeport/threeport/pkg/notifications/v0"
	gorm "gorm.io/gorm"
	"net/http"
	"time"
	notif "wordpress-threeport-module/internal/wordpress/notif"
	api_v0 "wordpress-threeport-module/pkg/api/v0"
)

///////////////////////////////////////////////////////////////////////////////
// WordpressDefinition
///////////////////////////////////////////////////////////////////////////////

// @Summary GetWordpressDefinitionVersions gets the supported versions for the wordpress definition API.
// @Description Get the supported API versions for wordpress definitions.
// @ID wordpressDefinition-get-versions
// @Produce json
// @Success 200 {object} tpapiserver_lib.ApiObjectVersions "OK"
// @Router /lander2k2-com/wordpress-definitions/versions [GET]
func (h Handler) GetWordpressDefinitionVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, tpapiserver_lib.ObjectVersions[string(api_v0.ObjectTypeWordpressDefinition)])
}

// @Summary adds a new wordpress definition.
// @Description Add a new wordpress definition to the Threeport database.
// @ID add-v0-wordpressDefinition
// @Accept json
// @Produce json
// @Param wordpressDefinition body api_v0.WordpressDefinition true "WordpressDefinition object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions [POST]
func (h Handler) AddWordpressDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	var wordpressDefinition api_v0.WordpressDefinition

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, false, objectType, wordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&wordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := tpapiserver_lib.ValidateBoundData(c, wordpressDefinition, objectType); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingWordpressDefinition api_v0.WordpressDefinition
	nameUsed := true
	result := h.Handler.DB.Where("name = ?", wordpressDefinition.Name).First(&existingWordpressDefinition)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return tpapiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.Handler.DB.Create(&wordpressDefinition); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*wordpressDefinition.Reconciled {
		notifPayload, err := wordpressDefinition.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressDefinitionCreateSubject, *notifPayload)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressDefinition, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all wordpress definitions.
// @Description Get all wordpress definitions from the Threeport database.
// @ID get-v0-wordpressDefinitions
// @Accept json
// @Produce json
// @Param name query string false "wordpress definition search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions [GET]
func (h Handler) GetWordpressDefinitions(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	params, err := c.(*tpapiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return tpapiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.WordpressDefinition
	if err := c.Bind(&filter); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.Handler.DB.Model(&api_v0.WordpressDefinition{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.WordpressDefinition{}
	if result := h.Handler.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(tpapiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a wordpress definition.
// @Description Get a particular wordpress definition from the database.
// @ID get-v0-wordpressDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions/{id} [GET]
func (h Handler) GetWordpressDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	wordpressDefinitionID := c.Param("id")
	var wordpressDefinition api_v0.WordpressDefinition
	if result := h.Handler.DB.First(&wordpressDefinition, wordpressDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressDefinition, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing wordpress definition.
// @Description Update a wordpress definition in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating wordpress definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-wordpressDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param wordpressDefinition body api_v0.WordpressDefinition true "WordpressDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions/{id} [PATCH]
func (h Handler) UpdateWordpressDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	wordpressDefinitionID := c.Param("id")
	var existingWordpressDefinition api_v0.WordpressDefinition
	if result := h.Handler.DB.First(&existingWordpressDefinition, wordpressDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, true, objectType, existingWordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWordpressDefinition api_v0.WordpressDefinition
	if err := c.Bind(&updatedWordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.Handler.DB.Model(&existingWordpressDefinition).Updates(updatedWordpressDefinition); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingWordpressDefinition.Reconciled {
		notifPayload, err := existingWordpressDefinition.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressDefinitionUpdateSubject, *notifPayload)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, existingWordpressDefinition, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing wordpress definition by replacing the entire object.
// @Description Replace a wordpress definition in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating wordpress definition objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-wordpressDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param wordpressDefinition body api_v0.WordpressDefinition true "WordpressDefinition object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions/{id} [PUT]
func (h Handler) ReplaceWordpressDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	wordpressDefinitionID := c.Param("id")
	var existingWordpressDefinition api_v0.WordpressDefinition
	if result := h.Handler.DB.First(&existingWordpressDefinition, wordpressDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, true, objectType, existingWordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWordpressDefinition api_v0.WordpressDefinition
	if err := c.Bind(&updatedWordpressDefinition); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := tpapiserver_lib.ValidateBoundData(c, updatedWordpressDefinition, objectType); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedWordpressDefinition.ID = existingWordpressDefinition.ID
	if result := h.Handler.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedWordpressDefinition); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.Handler.DB.First(&existingWordpressDefinition, wordpressDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, existingWordpressDefinition, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a wordpress definition.
// @Description Delete a wordpress definition by ID from the database.
// @ID delete-v0-wordpressDefinition
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-definitions/{id} [DELETE]
func (h Handler) DeleteWordpressDefinition(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressDefinition
	wordpressDefinitionID := c.Param("id")
	var wordpressDefinition api_v0.WordpressDefinition
	if result := h.Handler.DB.Preload("WordpressInstances").First(&wordpressDefinition, wordpressDefinitionID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check to make sure no dependent instances exist for this definition
	if len(wordpressDefinition.WordpressInstances) != 0 {
		err := errors.New("wordpress definition has related wordpress instances - cannot be deleted")
		return tpapiserver_lib.ResponseStatus409(c, nil, err, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if wordpressDefinition.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledWordpressDefinition := api_v0.WordpressDefinition{
			Reconciliation: tpapi_v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.Handler.DB.Model(&wordpressDefinition).Updates(scheduledWordpressDefinition); result.Error != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := wordpressDefinition.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressDefinitionDeleteSubject, *notifPayload)
	} else {
		if wordpressDefinition.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return tpapiserver_lib.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*wordpressDefinition.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.Handler.DB.Delete(&wordpressDefinition); result.Error != nil {
				return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressDefinition, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

///////////////////////////////////////////////////////////////////////////////
// WordpressInstance
///////////////////////////////////////////////////////////////////////////////

// @Summary GetWordpressInstanceVersions gets the supported versions for the wordpress instance API.
// @Description Get the supported API versions for wordpress instances.
// @ID wordpressInstance-get-versions
// @Produce json
// @Success 200 {object} tpapiserver_lib.ApiObjectVersions "OK"
// @Router /lander2k2-com/wordpress-instances/versions [GET]
func (h Handler) GetWordpressInstanceVersions(c echo.Context) error {
	return c.JSON(http.StatusOK, tpapiserver_lib.ObjectVersions[string(api_v0.ObjectTypeWordpressInstance)])
}

// @Summary adds a new wordpress instance.
// @Description Add a new wordpress instance to the Threeport database.
// @ID add-v0-wordpressInstance
// @Accept json
// @Produce json
// @Param wordpressInstance body api_v0.WordpressInstance true "WordpressInstance object"
// @Success 201 {object} v0.Response "Created"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances [POST]
func (h Handler) AddWordpressInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	var wordpressInstance api_v0.WordpressInstance

	// check for empty payload, unsupported fields, GORM Model fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, false, objectType, wordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	if err := c.Bind(&wordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := tpapiserver_lib.ValidateBoundData(c, wordpressInstance, objectType); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// check for duplicate names
	var existingWordpressInstance api_v0.WordpressInstance
	nameUsed := true
	result := h.Handler.DB.Where("name = ?", wordpressInstance.Name).First(&existingWordpressInstance)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			nameUsed = false
		} else {
			return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
	}
	if nameUsed {
		return tpapiserver_lib.ResponseStatus409(c, nil, errors.New("object with provided name already exists"), objectType)
	}

	// persist to DB
	if result := h.Handler.DB.Create(&wordpressInstance); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*wordpressInstance.Reconciled {
		notifPayload, err := wordpressInstance.NotificationPayload(
			notifications.NotificationOperationCreated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressInstanceCreateSubject, *notifPayload)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressInstance, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus201(c, *response)
}

// @Summary gets all wordpress instances.
// @Description Get all wordpress instances from the Threeport database.
// @ID get-v0-wordpressInstances
// @Accept json
// @Produce json
// @Param name query string false "wordpress instance search by name"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances [GET]
func (h Handler) GetWordpressInstances(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	params, err := c.(*tpapiserver_lib.CustomContext).GetPaginationParams()
	if err != nil {
		return tpapiserver_lib.ResponseStatus400(c, &params, err, objectType)
	}

	var filter api_v0.WordpressInstance
	if err := c.Bind(&filter); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	var totalCount int64
	if result := h.Handler.DB.Model(&api_v0.WordpressInstance{}).Where(&filter).Count(&totalCount); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	records := &[]api_v0.WordpressInstance{}
	if result := h.Handler.DB.Order("ID asc").Where(&filter).Limit(params.Size).Offset((params.Page - 1) * params.Size).Find(records); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(tpapiserver_lib.CreateMeta(params, totalCount), *records, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, &params, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary gets a wordpress instance.
// @Description Get a particular wordpress instance from the database.
// @ID get-v0-wordpressInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances/{id} [GET]
func (h Handler) GetWordpressInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	wordpressInstanceID := c.Param("id")
	var wordpressInstance api_v0.WordpressInstance
	if result := h.Handler.DB.First(&wordpressInstance, wordpressInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressInstance, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates specific fields for an existing wordpress instance.
// @Description Update a wordpress instance in the database.  Provide one or more fields to update.
// @Description Note: This API endpint is for updating wordpress instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID update-v0-wordpressInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param wordpressInstance body api_v0.WordpressInstance true "WordpressInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances/{id} [PATCH]
func (h Handler) UpdateWordpressInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	wordpressInstanceID := c.Param("id")
	var existingWordpressInstance api_v0.WordpressInstance
	if result := h.Handler.DB.First(&existingWordpressInstance, wordpressInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, true, objectType, existingWordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWordpressInstance api_v0.WordpressInstance
	if err := c.Bind(&updatedWordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// update object in database
	if result := h.Handler.DB.Model(&existingWordpressInstance).Updates(updatedWordpressInstance); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// notify controller if reconciliation is required
	if !*existingWordpressInstance.Reconciled {
		notifPayload, err := existingWordpressInstance.NotificationPayload(
			notifications.NotificationOperationUpdated,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressInstanceUpdateSubject, *notifPayload)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, existingWordpressInstance, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary updates an existing wordpress instance by replacing the entire object.
// @Description Replace a wordpress instance in the database.  All required fields must be provided.
// @Description If any optional fields are not provided, they will be null post-update.
// @Description Note: This API endpint is for updating wordpress instance objects only.
// @Description Request bodies that include related objects will be accepted, however
// @Description the related objects will not be changed.  Call the patch or put method for
// @Description each particular existing object to change them.
// @ID replace-v0-wordpressInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Param wordpressInstance body api_v0.WordpressInstance true "WordpressInstance object"
// @Success 200 {object} v0.Response "OK"
// @Failure 400 {object} v0.Response "Bad Request"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances/{id} [PUT]
func (h Handler) ReplaceWordpressInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	wordpressInstanceID := c.Param("id")
	var existingWordpressInstance api_v0.WordpressInstance
	if result := h.Handler.DB.First(&existingWordpressInstance, wordpressInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// check for empty payload, invalid or unsupported fields, optional associations, etc.
	if id, err := tpapiserver_lib.PayloadCheck(c, true, true, objectType, existingWordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// bind payload
	var updatedWordpressInstance api_v0.WordpressInstance
	if err := c.Bind(&updatedWordpressInstance); err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	// check for missing required fields
	if id, err := tpapiserver_lib.ValidateBoundData(c, updatedWordpressInstance, objectType); err != nil {
		return tpapiserver_lib.ResponseStatusErr(id, c, nil, errors.New(err.Error()), objectType)
	}

	// persist provided data
	updatedWordpressInstance.ID = existingWordpressInstance.ID
	if result := h.Handler.DB.Session(&gorm.Session{FullSaveAssociations: false}).Omit("CreatedAt", "DeletedAt").Save(&updatedWordpressInstance); result.Error != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// reload updated data from DB
	if result := h.Handler.DB.First(&existingWordpressInstance, wordpressInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	response, err := tpapiserver_lib.CreateResponse(nil, existingWordpressInstance, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}

// @Summary deletes a wordpress instance.
// @Description Delete a wordpress instance by ID from the database.
// @ID delete-v0-wordpressInstance
// @Accept json
// @Produce json
// @Param id path int true "ID"
// @Success 200 {object} v0.Response "OK"
// @Failure 404 {object} v0.Response "Not Found"
// @Failure 409 {object} v0.Response "Conflict"
// @Failure 500 {object} v0.Response "Internal Server Error"
// @Router /lander2k2-com/v0/wordpress-instances/{id} [DELETE]
func (h Handler) DeleteWordpressInstance(c echo.Context) error {
	objectType := api_v0.ObjectTypeWordpressInstance
	wordpressInstanceID := c.Param("id")
	var wordpressInstance api_v0.WordpressInstance
	if result := h.Handler.DB.First(&wordpressInstance, wordpressInstanceID); result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return tpapiserver_lib.ResponseStatus404(c, nil, result.Error, objectType)
		}
		return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
	}

	// schedule for deletion if not already scheduled
	// if scheduled and reconciled, delete object from DB
	// if scheduled but not reconciled, return 409 (controller is working on it)
	if wordpressInstance.DeletionScheduled == nil {
		// schedule for deletion
		reconciled := false
		timestamp := time.Now().UTC()
		scheduledWordpressInstance := api_v0.WordpressInstance{
			Reconciliation: tpapi_v0.Reconciliation{
				DeletionScheduled: &timestamp,
				Reconciled:        &reconciled,
			}}
		if result := h.Handler.DB.Model(&wordpressInstance).Updates(scheduledWordpressInstance); result.Error != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
		}
		// notify controller
		notifPayload, err := wordpressInstance.NotificationPayload(
			notifications.NotificationOperationDeleted,
			false,
			time.Now().Unix(),
		)
		if err != nil {
			return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
		}
		h.Handler.JS.Publish(notif.WordpressInstanceDeleteSubject, *notifPayload)
	} else {
		if wordpressInstance.DeletionConfirmed == nil {
			// if deletion scheduled but not reconciled, return 409 - deletion
			// already underway
			return tpapiserver_lib.ResponseStatus409(c, nil, errors.New(fmt.Sprintf(
				"object with ID %d already being deleted",
				*wordpressInstance.ID,
			)), objectType)
		} else {
			// object scheduled for deletion and confirmed - it can be deleted
			// from DB
			if result := h.Handler.DB.Delete(&wordpressInstance); result.Error != nil {
				return tpapiserver_lib.ResponseStatus500(c, nil, result.Error, objectType)
			}
		}
	}

	response, err := tpapiserver_lib.CreateResponse(nil, wordpressInstance, objectType)
	if err != nil {
		return tpapiserver_lib.ResponseStatus500(c, nil, err, objectType)
	}

	return tpapiserver_lib.ResponseStatus200(c, *response)
}
