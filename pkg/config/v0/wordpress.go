// generated by 'threeport-sdk gen' but will not be regenerated - intended for modification

package v0

import (
	"errors"
	"fmt"
	"net/http"

	tpapi_v0 "github.com/threeport/threeport/pkg/api/v0"
	tpclient "github.com/threeport/threeport/pkg/client/v0"
	tpconfig "github.com/threeport/threeport/pkg/config/v0"
	util "github.com/threeport/threeport/pkg/util/v0"

	api_v0 "wordpress-threeport-module/pkg/api/v0"
	client_v0 "wordpress-threeport-module/pkg/client/v0"
)

// WordpressConfig contains the config for a wordpress which is an abstraction
// of a wordpress definition and wordpress instance.
type WordpressConfig struct {
	Wordpress WordpressValues `yaml:"Wordpress"`
}

// WordpressValues contains the attributes needed to manage a wordpress
// definition and wordpress instance with a single operation.
type WordpressValues struct {
	Name                      *string                                   `yaml:"Name"`
	Environment               *string                                   `yaml:"Environment"`
	Replicas                  *int                                      `yaml:"Replicas"`
	ManagedDatabase           *bool                                     `yaml:"ManagedDatabase"`
	DomainName                *tpconfig.DomainNameValues                `yaml:"DomainName"`
	SubDomain                 *string                                   `yaml:"SubDomain"`
	KubernetesRuntimeInstance *tpconfig.KubernetesRuntimeInstanceValues `yaml:"KubernetesRuntimeInstance"`
	AwsAccountName            *string                                   `yaml:"AwsAccountName"`
}

// Create creates a wordpress definition and instance in the Threeport API.
func (w *WordpressValues) Create(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressDefinition, *api_v0.WordpressInstance, error) {
	// get operations
	operations, createdWordpressDefinition, createdWordpressInstance := w.GetOperations(
		apiClient,
		apiEndpoint,
	)

	// execute create operations
	if err := operations.Create(); err != nil {
		return nil, nil, fmt.Errorf(
			"failed to execute create operations for wordpress defined instance with name %s: %w",
			*w.Name,
			err,
		)
	}

	return createdWordpressDefinition, createdWordpressInstance, nil
}

// Delete deletes a wordpress definition and instance from the Threeport API.
func (w *WordpressValues) Delete(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressDefinition, *api_v0.WordpressInstance, error) {
	// get operations
	operations, _, _ := w.GetOperations(
		apiClient,
		apiEndpoint,
	)

	// execute delete operations
	if err := operations.Delete(); err != nil {
		return nil, nil, fmt.Errorf(
			"failed to execute delete operations for wordpress defined instance with name %s: %w",
			*w.Name,
			err,
		)
	}

	return nil, nil, nil
}

// GetOperations returns a slice of operations used to create or delete a
// wordpress defined instance.
func (w *WordpressValues) GetOperations(
	apiClient *http.Client,
	apiEndpoint string,
) (*util.Operations, *api_v0.WordpressDefinition, *api_v0.WordpressInstance) {
	var err error
	var createdWordpressDefinition api_v0.WordpressDefinition
	var createdWordpressInstance api_v0.WordpressInstance

	operations := util.Operations{}

	// add wordpress definition operation
	wordpressDefinitionValues := WordpressDefinitionValues{
		Name:            w.Name,
		Environment:     w.Environment,
		Replicas:        w.Replicas,
		ManagedDatabase: w.ManagedDatabase,
		DomainName:      w.DomainName,
		AwsAccountName:  w.AwsAccountName,
	}
	operations.AppendOperation(util.Operation{
		Create: func() error {
			wordpressDefinition, err := wordpressDefinitionValues.Create(apiClient, apiEndpoint)
			if err != nil {
				return fmt.Errorf("failed to create wordpress definition with name %s: %w", *w.Name, err)
			}
			createdWordpressDefinition = *wordpressDefinition
			return nil
		},
		Delete: func() error {
			_, err = wordpressDefinitionValues.Delete(apiClient, apiEndpoint)
			if err != nil {
				return fmt.Errorf("failed to delete wordpress definition with name %s: %w", *w.Name, err)
			}
			return nil
		},
		Name: "wordpress definition",
	})

	// add wordpress instance operation
	wordpressInstanceValues := WordpressInstanceValues{
		Name:      w.Name,
		SubDomain: w.SubDomain,
		WordpressDefinition: WordpressDefinitionValues{
			Name: w.Name,
		},
		KubernetesRuntimeInstance: w.KubernetesRuntimeInstance,
	}
	operations.AppendOperation(util.Operation{
		Create: func() error {
			wordpressInstance, err := wordpressInstanceValues.Create(apiClient, apiEndpoint)
			if err != nil {
				return fmt.Errorf("failed to create wordpress instance with name %s: %w", *w.Name, err)
			}
			createdWordpressInstance = *wordpressInstance
			return nil
		},
		Delete: func() error {
			_, err = wordpressInstanceValues.Delete(apiClient, apiEndpoint)
			if err != nil {
				return fmt.Errorf("failed to delete wordpress instance with name %s: %w", *w.Name, err)
			}
			return nil
		},
		Name: "wordpress instance",
	})

	return &operations, &createdWordpressDefinition, &createdWordpressInstance
}

// WordpressDefinitionConfig contains the config for a wordpress definition.
type WordpressDefinitionConfig struct {
	WordpressDefinition WordpressDefinitionValues `yaml:"WordpressDefinition"`
}

// WordpressDefinitionValues contains the attributes for the wordpress definition
// config abstraction.
type WordpressDefinitionValues struct {
	Name            *string                    `yaml:"Name"`
	Environment     *string                    `yaml:"Environment"`
	Replicas        *int                       `yaml:"Replicas"`
	ManagedDatabase *bool                      `yaml:"ManagedDatabase"`
	DomainName      *tpconfig.DomainNameValues `yaml:"DomainName"`
	AwsAccountName  *string                    `yaml:"AwsAccount"`
}

// Create creates a wordpress definition in the Threeport API.
func (w *WordpressDefinitionValues) Create(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressDefinition, error) {
	// validate config
	// environment
	if w.Environment != nil {
		validEnvs := []string{"dev", "prod"}
		envValid := false
		for _, env := range validEnvs {
			if *w.Environment == env {
				envValid = true
				break
			}
		}
		if !envValid {
			return nil, fmt.Errorf("invalid Environment - must be one of %s", validEnvs)
		}
	}
	// domain name
	if w.DomainName != nil {
		if w.DomainName.Name == nil {
			return nil, errors.New("must provide a name for the domain name definition to use")
		}
	}

	// construct wordpress definition object
	wordpressDefinition := api_v0.WordpressDefinition{
		Definition: tpapi_v0.Definition{
			Name: w.Name,
		},
	}
	if w.Environment != nil {
		wordpressDefinition.Environment = w.Environment
	}
	if w.Replicas != nil {
		wordpressDefinition.Replicas = w.Replicas
	}
	if w.ManagedDatabase != nil {
		wordpressDefinition.ManagedDatabase = w.ManagedDatabase
	}
	// create wordpress definition
	createdWordpressDefinition, err := client_v0.CreateWordpressDefinition(
		apiClient,
		apiEndpoint,
		&wordpressDefinition,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create wordpress definition in threeport API: %w", err)
	}

	// make domain name definition attachment if defined
	if w.DomainName != nil {
		// look up domain name by name
		domainNameDefinition, err := tpclient.GetDomainNameDefinitionByName(
			apiClient,
			apiEndpoint,
			*w.DomainName.Name,
		)
		if err != nil {
			return nil, fmt.Errorf("domain name definition %s not found: %w", *w.DomainName.Name, err)
		}
		// set attachment of wordpress definition to domain name definition
		if err := tpclient.EnsureAttachedObjectReferenceExists(
			apiClient,
			apiEndpoint,
			tpapi_v0.ObjectTypeDomainNameDefinition,
			domainNameDefinition.ID,
			api_v0.ObjectTypeWordpressDefinition,
			createdWordpressDefinition.ID,
		); err != nil {
			return nil, fmt.Errorf("failed to attach wordpress definition to domain name definition: %w", err)
		}
	}

	// make AWS account attachment if needed
	if w.ManagedDatabase != nil && *w.ManagedDatabase {
		var awsAccountId uint
		if w.AwsAccountName == nil {
			// look for default account
			queryString := "default=true"
			awsAccounts, err := tpclient.GetAwsAccountsByQueryString(
				apiClient,
				apiEndpoint,
				queryString,
			)
			if err != nil {
				return nil, fmt.Errorf("failed to get default AWS account: %w", err)
			}
			if len(*awsAccounts) == 0 {
				return nil, errors.New("no AWS account name provided and no default account found")
			}
			awsAccountId = *(*awsAccounts)[0].ID
		} else {
			// look up AWS account by name
			awsAccount, err := tpclient.GetAwsAccountByName(
				apiClient,
				apiEndpoint,
				*w.AwsAccountName,
			)
			if err != nil {
				return nil, fmt.Errorf("failed to get AWS account by name %s: %w", *w.AwsAccountName, err)
			}
			awsAccountId = *awsAccount.ID
		}
		// set attachment of wordpress definition to AWS account
		if err := tpclient.EnsureAttachedObjectReferenceExists(
			apiClient,
			apiEndpoint,
			tpapi_v0.ObjectTypeAwsAccount,
			&awsAccountId,
			api_v0.ObjectTypeWordpressDefinition,
			createdWordpressDefinition.ID,
		); err != nil {
			return nil, fmt.Errorf("failed to attach wordpress definition to AWS account: %w", err)
		}
	}

	return createdWordpressDefinition, nil
}

// Delete deletes a wordpress definition from the Threeport API.
func (w *WordpressDefinitionValues) Delete(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressDefinition, error) {
	// get wordpress definition by name
	wordpressDefinition, err := client_v0.GetWordpressDefinitionByName(
		apiClient,
		apiEndpoint,
		*w.Name,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to find wordpress definition with name %s: %w", *w.Name, err)
	}

	// delete wordpress definition
	deletedWordpressDefinition, err := client_v0.DeleteWordpressDefinition(
		apiClient,
		apiEndpoint,
		*wordpressDefinition.ID,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to delete wordpress definition from Threeport API: %w", err)
	}

	return deletedWordpressDefinition, nil
}

// WordpressInstanceConfig contains the config for a wordpress instance.
type WordpressInstanceConfig struct {
	WordpressInstance WordpressInstanceValues `yaml:"WordpressInstance"`
}

// WordpressInstanceValues contains the attributes for the wordpress instance
// config abstraction.
type WordpressInstanceValues struct {
	Name                      *string                                   `yaml:"Name"`
	SubDomain                 *string                                   `yaml:"SubDomain"`
	WordpressDefinition       WordpressDefinitionValues                 `yaml:"WordpressDefinition"`
	KubernetesRuntimeInstance *tpconfig.KubernetesRuntimeInstanceValues `yaml:"KubernetesRuntimeInstance"`
}

// Create creates a wordpress instance in the Threeport API.
func (w *WordpressInstanceValues) Create(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressInstance, error) {
	// validate config
	// TODO

	// get kubernetes runtime instance API object
	kubernetesRuntimeInstance, err := tpconfig.SetKubernetesRuntimeInstanceForConfig(
		w.KubernetesRuntimeInstance,
		apiClient,
		apiEndpoint,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to set kubernetes runtime instance: %w", err)
	}

	// get wordpress definition by name
	wordpressDefinition, err := client_v0.GetWordpressDefinitionByName(
		apiClient,
		apiEndpoint,
		*w.WordpressDefinition.Name,
	)
	if err != nil {
		return nil, fmt.Errorf(
			"failed to get wordpress definition by name %s: %w",
			w.WordpressDefinition.Name,
			err,
		)
	}

	// construct wordpress instance object
	wordpressInstance := api_v0.WordpressInstance{
		Instance: tpapi_v0.Instance{
			Name: w.Name,
		},
		WordpressDefinitionID: wordpressDefinition.ID,
	}
	if w.SubDomain != nil {
		wordpressInstance.SubDomain = w.SubDomain
	}

	// create wordpress instance
	createdWordpressInstance, err := client_v0.CreateWordpressInstance(
		apiClient,
		apiEndpoint,
		&wordpressInstance,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create wordpress instance in threeport API: %w", err)
	}

	// create attached object reference to kubernetes runtime instance
	if err := tpclient.EnsureAttachedObjectReferenceExists(
		apiClient,
		apiEndpoint,
		tpapi_v0.ObjectTypeKubernetesRuntimeInstance,
		kubernetesRuntimeInstance.ID,
		api_v0.ObjectTypeWordpressInstance,
		createdWordpressInstance.ID,
	); err != nil {
		return nil, fmt.Errorf("failed to attach wordpress instance to kubernetes runtime instance: %w", err)
	}

	return createdWordpressInstance, nil
}

// Delete deletes a wordpress instance from the Threeport API.
func (w *WordpressInstanceValues) Delete(
	apiClient *http.Client,
	apiEndpoint string,
) (*api_v0.WordpressInstance, error) {
	// get wordpress instance by name
	wordpressInstance, err := client_v0.GetWordpressInstanceByName(
		apiClient,
		apiEndpoint,
		*w.Name,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to find wordpress instance with name %s: %w", *w.Name, err)
	}

	// delete wordpress instance
	deletedWordpressInstance, err := client_v0.DeleteWordpressInstance(
		apiClient,
		apiEndpoint,
		*wordpressInstance.ID,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to delete wordpress instance from Threeport API: %w", err)
	}

	// wait for workload instance to be deleted
	util.Retry(60, 1, func() error {
		if _, err := client_v0.GetWordpressInstanceByName(apiClient, apiEndpoint, *w.Name); err == nil {
			return errors.New("workload instance not deleted")
		}
		return nil
	})

	// get kubernetes runtime instance API object
	kubernetesRuntimeInstance, err := tpconfig.SetKubernetesRuntimeInstanceForConfig(
		w.KubernetesRuntimeInstance,
		apiClient,
		apiEndpoint,
	)
	if err != nil {
		return nil, fmt.Errorf("failed to set kubernetes runtime instance: %w", err)
	}

	// remove attached object reference to kubernetes runtime instance
	if err := tpclient.EnsureAttachedObjectReferenceRemoved(
		apiClient,
		apiEndpoint,
		tpapi_v0.ObjectTypeKubernetesRuntimeInstance,
		kubernetesRuntimeInstance.ID,
		api_v0.ObjectTypeWordpressInstance,
		deletedWordpressInstance.ID,
	); err != nil {
		return nil, fmt.Errorf("failed to remove wordpress instance attachment to kubernetes runtime instance: %w", err)
	}

	return deletedWordpressInstance, nil
}
